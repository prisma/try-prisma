#!/usr/bin/env node
import{Command as M}from"commander";import o from"inquirer";import E from"axios";var f="https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1",g="https://codeload.github.com/prisma/prisma-examples/tar.gz/latest",u=[".vscode",".github",".editorconfig"];async function w(){let{data:t,status:e}=await E.get(f);if(e!==200)throw new Error(`Something went wrong when fetching the available projects from prisma/prisma-examples. Got status code ${e}`);let i=t.tree.filter(r=>!u.some(a=>r.path.startsWith(a))).reduce((r,a)=>{if(a.type==="blob"){let s=a.path.split("/").pop(),l=a.path.replace(`/${s}`,"");return r[l]?r[l].push(s):r[l]=[s],r}else return{...r,[a.path]:[]}},{});for(let r in i)i[r].includes("package.json")||delete i[r];return Object.keys(i).sort()}import d from"path";import x from"stream";import{promisify as k}from"util";import j from"gunzip-maybe";import v from"tar-fs";import _ from"node-fetch";import c from"chalk";var m={error:t=>{console.log(c.redBright(t))},info:t=>{console.log(c.cyanBright(t))},warn:t=>{console.log(c.yellowBright(t))}};var S=k(x.pipeline);async function h(t,e){var r;if(!t)throw m.warn("No project was selected from the prisma/prisma-examples repostory."),new Error;let i=await _(g);if(i.status!==200)throw new Error(`Something went wrong when fetching prisma/prisma-examples. Recieved a status code ${i.status}.`);try{await S((r=i.body)==null?void 0:r.pipe(j()),v.extract(e,{map(a){let s=a.name.split("/")[0];return a.name=a.name.replace(`${s}/`,""),t=t.split(d.sep).join(d.posix.sep),t&&(a.name.startsWith(t)?a.name=a.name.replace(t,""):a.name="<ignore-me>"),a},ignore(a,s){if(!s)throw new Error("Header is undefined");return s.name==="<ignore-me>"}}))}catch{throw new Error("Something went wrong when extracting the files from the repostory tar file.")}}import R from"inquirer-search-list";import b from"fs";var n={directoryName(t){return/[<>:"\/\\|?*\x00-\x1F]|^(?:aux|con|clock\$|nul|prn|com[1-9]|lpt[1-9])$/i.test(t)?"Sorry, that name is invalid.":!0},directory(t){return t.slice(-1)==="/"&&t!="./"?"The path should not end in /":b.existsSync(t)?!0:`Unable to reach a directory at ${t}`},project(t,e){return t.includes(e.trim())?!0:"Oops! That isn't a valid template."}};o.registerPrompt("search-list",R);var p=class{constructor(){this.projects=[];this.answers={template:"",install:!1,name:"",dirpath:"",pkgMgr:""}}validateUserInput(){if(this.answers.template.length){let e=n.project(this.projects,this.answers.template);if(typeof e=="string")throw Error(e)}if(this.answers.name.length){let e=n.directoryName(this.answers.name);if(typeof e=="string")throw Error(e)}if(this.answers.dirpath.length){let e=n.directory(this.answers.dirpath);if(typeof e=="string")throw Error(e)}}async run(){var e;if(this.projects=await w(),this.validateUserInput(),!this.answers.template.length){let{template:i}=await o.prompt({type:"search-list",message:"Which template would you like to use?",name:"template",choices:this.projects,validate:r=>n.project(this.projects,r)});this.answers.template=i}if(!this.answers.install){let{packages:i}=await o.prompt({type:"confirm",message:"Should we run `npm install` for you?",name:"packages",default:!1});this.answers.install=i}if(!this.answers.pkgMgr.length&&this.answers.install){let{manager:i}=await o.prompt({type:"list",message:"Which package manager do you prefer?",name:"manager",default:"npm",choices:["npm","Yarn"]});this.answers.pkgMgr=i}if(!this.answers.name.length){let{dirname:i}=await o.prompt({type:"input",message:"What should the project be named?",name:"dirname",default:((e=this.answers.template)==null?void 0:e.replace("/","_"))||"",filter:r=>r.replace("/","_").trim(),validate(r){return n.directoryName(r)}});this.answers.name=i}if(!this.answers.dirpath.length){let{dirpath:i}=await o.prompt({type:"input",message:"Where should the new folder be created?",name:"dirpath",default:"./",validate(r){return n.directory(r)}});this.answers.dirpath=i}await this.performSetup()}async performSetup(){await h(this.answers.template,`${this.answers.dirpath}/${this.answers.name}`),this.answers.install,console.log(this.answers)}};var y=new M;async function A(){y.name("create-prisma-app").description("Quickly get up and running with one of Prisma's many starter templates.").version("0.0.1").option("-t, --template <template-name>","Which example project would you like to start off with?").option("-i, --install [package-manager]","Specifies you would like to run `npm install` automatically after creating the project. You can also specify which package manager to use [npm or yarn]").option("-n, --name <project-name>","What should the resulting directory be named?").option("-p, --path <dir-path>","Where should the resulting directory be created?").parse(process.argv);let{template:t,install:e,name:i,path:r}=y.opts(),a=new p;t&&(a.answers.template=t),i&&(a.answers.name=i.replace("/","_").trim()),e&&(console.log(e),a.answers.install=!0,typeof e=="string"&&e.trim().length&&(a.answers.pkgMgr=e.trim())),r&&(a.answers.dirpath=r);try{await a.run()}catch(s){m.error(s.message||"")}}A();
//# sourceMappingURL=index.js.map