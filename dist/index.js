#!/usr/bin/env node
import{Command as A}from"commander";import n from"inquirer";import E from"axios";var f="https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1",u="https://codeload.github.com/prisma/prisma-examples/tar.gz/latest",d=[".vscode",".github",".editorconfig"];async function w(){let{data:t,status:i}=await E.get(f);if(i!==200)throw new Error(`Something went wrong when fetching the available projects from prisma/prisma-examples. Got status code ${i}`);let a=t.tree.filter(e=>!d.some(r=>e.path.startsWith(r))).reduce((e,r)=>{if(r.type==="blob"){let s=r.path.split("/").pop(),m=r.path.replace(`/${s}`,"");return e[m]?e[m].push(s):e[m]=[s],e}else return{...e,[r.path]:[]}},{});for(let e in a)a[e].includes("package.json")||delete a[e];return Object.keys(a).sort()}import g from"path";import x from"stream";import{promisify as j}from"util";import v from"gunzip-maybe";import _ from"tar-fs";import S from"node-fetch";import c from"chalk";var l={error:t=>{console.log(c.redBright(t))},info:t=>{console.log(c.cyanBright(t))},warn:t=>{console.log(c.yellowBright(t))}};var b=j(x.pipeline);async function h(t,i){var e;if(!t)throw l.warn("No project was selected from the prisma/prisma-examples repostory."),new Error;let a=await S(u);if(a.status!==200)throw new Error(`Something went wrong when fetching prisma/prisma-examples. Recieved a status code ${a.status}.`);try{await b((e=a.body)==null?void 0:e.pipe(v()),_.extract(i,{map(r){let s=r.name.split("/")[0];return r.name=r.name.replace(`${s}/`,""),t=t.split(g.sep).join(g.posix.sep),t&&(r.name.startsWith(t)?r.name=r.name.replace(t,""):r.name="<ignore-me>"),r},ignore(r,s){if(!s)throw new Error("Header is undefined");return s.name==="<ignore-me>"}}))}catch{throw new Error("Something went wrong when extracting the files from the repostory tar file.")}}import k from"inquirer-search-list";import R from"fs";var o={directoryName(t){return/[<>:"\/\\|?*\x00-\x1F]|^(?:aux|con|clock\$|nul|prn|com[1-9]|lpt[1-9])$/i.test(t)?"Sorry, that name is invalid.":!0},directory(t){return t.slice(-1)==="/"&&t!="./"?"The path should not end in /":R.existsSync(t)?!0:`Unable to reach a directory at ${t}`},project(t,i){return t.includes(i.trim())?!0:"Oops! That isn't a valid template."}};n.registerPrompt("search-list",k);var p=class{constructor(){this.projects=[];this.answers={template:"",install:!1,name:"",dirpath:""}}validateUserInput(){if(this.answers.template.length){let i=o.project(this.projects,this.answers.template);if(typeof i=="string")throw Error(i)}if(this.answers.name.length){let i=o.directoryName(this.answers.name);if(typeof i=="string")throw Error(i)}if(this.answers.dirpath.length){let i=o.directory(this.answers.dirpath);if(typeof i=="string")throw Error(i)}}async run(){var i;if(this.projects=await w(),this.validateUserInput(),!this.answers.template.length){let{template:a}=await n.prompt({type:"search-list",message:"Which template would you like to use?",name:"template",choices:this.projects,validate:e=>o.project(this.projects,e)});this.answers.template=a}if(!this.answers.install){let{packages:a}=await n.prompt({type:"confirm",message:"Should we run `npm install` for you?",name:"packages",default:!1});this.answers.install=a}if(!this.answers.name.length){let{dirname:a}=await n.prompt({type:"input",message:"What should the project be named?",name:"dirname",default:((i=this.answers.template)==null?void 0:i.replace("/","_"))||"",filter:e=>e.replace("/","_").trim(),validate(e){return o.directoryName(e)}});this.answers.name=a}if(!this.answers.dirpath.length){let{dirpath:a}=await n.prompt({type:"input",message:"Where should the new folder be created?",name:"dirpath",default:"./",validate(e){return o.directory(e)}});this.answers.dirpath=a}await this.performSetup()}async performSetup(){await h(this.answers.template,`${this.answers.dirpath}/${this.answers.name}`),this.answers.install,console.log(this.answers)}};var y=new A;async function L(){y.name("create-prisma-app").description("Quickly get up and running with one of Prisma's many starter templates.").version("0.0.1").option("-t, --template <template-name>","Which example project would you like to start off with?").option("-i, --install","Specifies you would like to run `npm install` automatically after creating the project.").option("-n, --name <project-name>","What should the resulting directory be named?").option("-p, --path <dir-path>","Where should the resulting directory be created?").parse(process.argv);let{template:t,install:i,name:a,path:e}=y.opts(),r=new p;t&&(r.answers.template=t),a&&(r.answers.name=a.replace("/","_").trim()),i&&(r.answers.install=!0),e&&(r.answers.dirpath=e);try{await r.run()}catch(s){l.error(s.message||"")}}L();
//# sourceMappingURL=index.js.map