#!/usr/bin/env node
import{Command as N}from"commander";import o from"inquirer";import k from"axios";var f="https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1",d="https://codeload.github.com/prisma/prisma-examples/tar.gz/latest",w=[".vscode",".github",".editorconfig"];async function u(){let{data:r,status:t}=await k.get(f);if(t!==200)throw new Error(`Something went wrong when fetching the available projects from prisma/prisma-examples. Got status code ${t}`);let s=r.tree.filter(a=>!w.some(e=>a.path.startsWith(e))).reduce((a,e)=>{if(e.type==="blob"){let i=e.path.split("/").pop(),c=e.path.replace(`/${i}`,"");return a[c]?a[c].push(i):a[c]=[i],a}else return{...a,[e.path]:[]}},{});for(let a in s)s[a].includes("package.json")||delete s[a];return Object.keys(s).sort()}import y from"path";import $ from"stream";import{promisify as j}from"util";import _ from"gunzip-maybe";import b from"tar-fs";import v from"node-fetch";import h from"chalk";var m={error:r=>{console.log(h.redBright(r))},info:r=>{console.log(h.cyanBright(r))},warn:r=>{console.log(h.yellowBright(r))}};var S=j($.pipeline);async function g(r,t){var a;if(!r)throw m.warn("No project was selected from the prisma/prisma-examples repostory."),new Error;let s=await v(d);if(s.status!==200)throw new Error(`Something went wrong when fetching prisma/prisma-examples. Recieved a status code ${s.status}.`);try{await S((a=s.body)==null?void 0:a.pipe(_()),b.extract(t,{map(e){let i=e.name.split("/")[0];return e.name=e.name.replace(`${i}/`,""),r=r.split(y.sep).join(y.posix.sep),r&&(e.name.startsWith(r)?e.name=e.name.replace(r,""):e.name="<ignore-me>"),e},ignore(e,i){if(!i)throw new Error("Header is undefined");return i.name==="<ignore-me>"}}))}catch{throw new Error("Something went wrong when extracting the files from the repostory tar file.")}}import M from"fs";var n={directoryName(r){return/[<>:"\/\\|?*\x00-\x1F]|^(?:aux|con|clock\$|nul|prn|com[1-9]|lpt[1-9])$/i.test(r)?"Sorry, that name is invalid.":!0},directory(r){return r.slice(-1)==="/"?"The path should not end in /":M.existsSync(r)?!0:`Unable to reach a directory at ${r}`},project(r,t){return r.includes(t.trim())?!0:"Oops! That isn't a valid template."}};import x from"ora";import R from"inquirer-search-list";import{exec as A}from"child_process";import{promisify as L}from"util";import l from"chalk";o.registerPrompt("search-list",R);var O=L(A),p=class{constructor(){this.projects=[];this.answers={template:"",install:!1,name:"",dirpath:"",pkgMgr:""}}validateUserInput(){if(this.answers.template.length){let t=n.project(this.projects,this.answers.template);if(typeof t=="string")throw Error(t)}if(this.answers.name.length){let t=n.directoryName(this.answers.name);if(typeof t=="string")throw Error(t)}if(this.answers.dirpath.length){let t=n.directory(this.answers.dirpath);if(typeof t=="string")throw Error(t)}}async run(){var s;let t=x("Loading example projects").start();if(this.projects=await u(),t.stop(),this.validateUserInput(),!this.answers.template.length){let{template:a}=await o.prompt({type:"search-list",message:"Which template would you like to use?",name:"template",choices:this.projects,validate:e=>n.project(this.projects,e)});this.answers.template=a}if(!this.answers.install){let{packages:a}=await o.prompt({type:"confirm",message:"Should we run `npm install` for you?",name:"packages",default:!1});this.answers.install=a}if(!this.answers.pkgMgr.length&&this.answers.install){let{manager:a}=await o.prompt({type:"list",message:"Which package manager do you prefer?",name:"manager",default:process.env.npm_config_user_agent,choices:["npm","Yarn","pnpm"]});this.answers.pkgMgr=a}if(!this.answers.name.length){let{dirname:a}=await o.prompt({type:"input",message:"What should the project be named?",name:"dirname",default:((s=this.answers.template)==null?void 0:s.replace("/","_"))||"",filter:e=>e.replace("/","_").trim(),validate(e){return n.directoryName(e)}});this.answers.name=a}if(!this.answers.dirpath.length){let{dirpath:a}=await o.prompt({type:"input",message:"Where should the new folder be created?",name:"dirpath",default:".",validate(e){return n.directory(e)}});this.answers.dirpath=a}await this.performSetup()}async performSetup(){let t=x(`Downloading and extracting the ${this.answers.name} project`).start();if(await g(this.answers.template,`${this.answers.dirpath}/${this.answers.name}`),t.succeed(`Downloaded and extracted the ${this.answers.name} project.`),this.answers.install){t.start(`Running \`${this.answers.pkgMgr} install\`. This may take a bit...`);try{await O(`${this.answers.pkgMgr.toLowerCase()} install`,{cwd:`${this.answers.dirpath}/${this.answers.name}`}),t.succeed("Installed packages.")}catch(s){throw t.stopAndPersist(),Error(`There was a problem installing your packages.
${s.message}${s.message.indexOf("command not found")>-1?l.cyan(`No worries. Once you install ${l.green(this.answers.pkgMgr)} you can run ${l.green(`${this.answers.pkgMgr} install`)} again.`):""}`)}}t.succeed(`You're all set! Your project can be found at: ${l.bold(`${this.answers.dirpath}/${this.answers.name}`)}`)}};var E=new N;async function P(){E.name("create-prisma-app").description("Quickly get up and running with one of Prisma's many starter templates.").version("0.0.1").option("-t, --template <template-name>","Which example project would you like to start off with?").option("-i, --install [package-manager]","Specifies you would like to run `npm install` automatically after creating the project. You can also specify which package manager to use [npm or yarn]").option("-n, --name <project-name>","What should the resulting directory be named?").option("-p, --path <dir-path>","Where should the resulting directory be created?").parse(process.argv);let{template:r,install:t,name:s,path:a}=E.opts(),e=new p;r&&(e.answers.template=r),s&&(e.answers.name=s.replace("/","_").trim()),t&&(e.answers.install=!0,typeof t=="string"&&t.trim().length&&(e.answers.pkgMgr=t.trim())),a&&(e.answers.dirpath=a);try{await e.run()}catch(i){m.error(i.message||"")}}P();
//# sourceMappingURL=index.js.map