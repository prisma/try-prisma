#!/usr/bin/env node
import{Command as W}from"commander";import o from"inquirer";import E from"axios";var g="https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1",f="https://codeload.github.com/prisma/prisma-examples/tar.gz/latest",w=[".vscode",".github",".editorconfig"];async function u(){let{data:e,status:r}=await E.get(g);if(r!==200)throw new Error(`Something went wrong when fetching the available projects from prisma/prisma-examples. Got status code ${r}`);let s=e.tree.filter(a=>!w.some(t=>a.path.startsWith(t))).reduce((a,t)=>{if(t.type==="blob"){let i=t.path.split("/").pop(),l=t.path.replace(`/${i}`,"");return a[l]?a[l].push(i):a[l]=[i],a}else return{...a,[t.path]:[]}},{});for(let a in s)s[a].includes("package.json")||delete s[a];return Object.keys(s).sort()}import d from"path";import k from"stream";import{promisify as j}from"util";import v from"gunzip-maybe";import _ from"tar-fs";import S from"node-fetch";import c from"chalk";var m={error:e=>{console.log(c.redBright(e))},info:e=>{console.log(c.cyanBright(e))},warn:e=>{console.log(c.yellowBright(e))}};var R=j(k.pipeline);async function h(e,r){var a;if(!e)throw m.warn("No project was selected from the prisma/prisma-examples repostory."),new Error;let s=await S(f);if(s.status!==200)throw new Error(`Something went wrong when fetching prisma/prisma-examples. Recieved a status code ${s.status}.`);try{await R((a=s.body)==null?void 0:a.pipe(v()),_.extract(r,{map(t){let i=t.name.split("/")[0];return t.name=t.name.replace(`${i}/`,""),e=e.split(d.sep).join(d.posix.sep),e&&(t.name.startsWith(e)?t.name=t.name.replace(e,""):t.name="<ignore-me>"),t},ignore(t,i){if(!i)throw new Error("Header is undefined");return i.name==="<ignore-me>"}}))}catch{throw new Error("Something went wrong when extracting the files from the repostory tar file.")}}import b from"fs";var n={directoryName(e){return/[<>:"\/\\|?*\x00-\x1F]|^(?:aux|con|clock\$|nul|prn|com[1-9]|lpt[1-9])$/i.test(e)?"Sorry, that name is invalid.":!0},directory(e){return e.slice(-1)==="/"&&e!="./"?"The path should not end in /":b.existsSync(e)?!0:`Unable to reach a directory at ${e}`},project(e,r){return e.includes(r.trim())?!0:"Oops! That isn't a valid template."}};import y from"ora";import $ from"inquirer-search-list";import{exec as M}from"child_process";import{promisify as L}from"util";o.registerPrompt("search-list",$);var A=L(M),p=class{constructor(){this.projects=[];this.answers={template:"",install:!1,name:"",dirpath:"",pkgMgr:""}}validateUserInput(){if(this.answers.template.length){let r=n.project(this.projects,this.answers.template);if(typeof r=="string")throw Error(r)}if(this.answers.name.length){let r=n.directoryName(this.answers.name);if(typeof r=="string")throw Error(r)}if(this.answers.dirpath.length){let r=n.directory(this.answers.dirpath);if(typeof r=="string")throw Error(r)}}async run(){var s;let r=y("Loading example projects").start();if(this.projects=await u(),r.stop(),this.validateUserInput(),!this.answers.template.length){let{template:a}=await o.prompt({type:"search-list",message:"Which template would you like to use?",name:"template",choices:this.projects,validate:t=>n.project(this.projects,t)});this.answers.template=a}if(!this.answers.install){let{packages:a}=await o.prompt({type:"confirm",message:"Should we run `npm install` for you?",name:"packages",default:!1});this.answers.install=a}if(!this.answers.pkgMgr.length&&this.answers.install){let{manager:a}=await o.prompt({type:"list",message:"Which package manager do you prefer?",name:"manager",default:"npm",choices:["npm","Yarn"]});this.answers.pkgMgr=a}if(!this.answers.name.length){let{dirname:a}=await o.prompt({type:"input",message:"What should the project be named?",name:"dirname",default:((s=this.answers.template)==null?void 0:s.replace("/","_"))||"",filter:t=>t.replace("/","_").trim(),validate(t){return n.directoryName(t)}});this.answers.name=a}if(!this.answers.dirpath.length){let{dirpath:a}=await o.prompt({type:"input",message:"Where should the new folder be created?",name:"dirpath",default:"./",validate(t){return n.directory(t)}});this.answers.dirpath=a}await this.performSetup()}async performSetup(){let r=y(`Downloading and extracting the ${this.answers.name} project`).start();await h(this.answers.template,`${this.answers.dirpath}/${this.answers.name}`),this.answers.install&&(r.text=`Running \`${this.answers.pkgMgr} install\``,await A(`${this.answers.pkgMgr.toLowerCase()} install`,{cwd:`${this.answers.dirpath}/${this.answers.name}`})),r.succeed("You're all set!"),console.log(this.answers)}};var x=new W;async function N(){x.name("create-prisma-app").description("Quickly get up and running with one of Prisma's many starter templates.").version("0.0.1").option("-t, --template <template-name>","Which example project would you like to start off with?").option("-i, --install [package-manager]","Specifies you would like to run `npm install` automatically after creating the project. You can also specify which package manager to use [npm or yarn]").option("-n, --name <project-name>","What should the resulting directory be named?").option("-p, --path <dir-path>","Where should the resulting directory be created?").parse(process.argv);let{template:e,install:r,name:s,path:a}=x.opts(),t=new p;e&&(t.answers.template=e),s&&(t.answers.name=s.replace("/","_").trim()),r&&(t.answers.install=!0,typeof r=="string"&&r.trim().length&&(t.answers.pkgMgr=r.trim())),a&&(t.answers.dirpath=a);try{await t.run()}catch(i){m.error(i.message||"")}}N();
//# sourceMappingURL=index.js.map