{"version":3,"sources":["../src/index.ts","../src/cli.ts","../src/helpers/getRepoFolders.ts","../src/constants.ts","../src/helpers/downloadTarbalAndExtract.ts","../src/helpers/logger.ts","../src/helpers/validation.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from \"commander\";\nimport Cli from \"./cli\";\nimport logger from \"./helpers/logger\";\n\nconst program = new Command();\n\nasync function main() {\n  program\n    .name(\"create-prisma-app\")\n    .description(\n      \"Quickly get up and running with one of Prisma's many starter templates.\"\n    )\n    .version(\"0.0.1\")\n    .option(\n      \"-t, --template <template-name>\",\n      \"Which example project would you like to start off with?\"\n    )\n    .option(\n      \"-i, --install [package-manager]\",\n      \"Specifies you would like to run `npm install` automatically after creating the project. You can also specify which package manager to use [npm or yarn]\"\n    )\n    .option(\n      \"-n, --name <project-name>\",\n      \"What should the resulting directory be named?\"\n    )\n    .option(\n      \"-p, --path <dir-path>\",\n      \"Where should the resulting directory be created?\"\n    )\n    .parse(process.argv);\n\n  const { template, install, name, path } = program.opts();\n\n  const cli = new Cli();\n\n  if (template) {\n    cli.answers.template = template;\n  }\n  if (name) {\n    cli.answers.name = name.replace(\"/\", \"_\").trim();\n  }\n  if (install) {\n    cli.answers.install = true;\n    if (typeof install === \"string\" && install.trim().length) {\n      cli.answers.pkgMgr = install.trim();\n    }\n  }\n  if (path) {\n    cli.answers.dirpath = path;\n  }\n\n  try {\n    await cli.run();\n  } catch (e) {\n    logger.error(e.message || \"\");\n  }\n}\nmain();\n","import inquirer from \"inquirer\";\nimport getRepoFolders from \"./helpers/getRepoFolders\";\nimport downloadTarAndExtract from \"./helpers/downloadTarbalAndExtract\";\nimport validate from \"./helpers/validation\";\nimport ora from \"ora\";\nimport SearchList from \"inquirer-search-list\";\ninquirer.registerPrompt(\"search-list\", SearchList);\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execa = promisify(exec);\nexport default class Cli {\n  private projects: string[] = [];\n  public answers: {\n    template: string;\n    install: boolean;\n    name: string;\n    dirpath: string;\n    pkgMgr: string;\n  } = {\n    template: \"\",\n    install: false,\n    name: \"\",\n    dirpath: \"\",\n    pkgMgr: \"\",\n  };\n\n  constructor() {}\n\n  private validateUserInput() {\n    if (this.answers.template.length) {\n      const valid = validate.project(this.projects, this.answers.template);\n      if (typeof valid === \"string\") {\n        throw Error(valid);\n      }\n    }\n\n    if (this.answers.name.length) {\n      const valid = validate.directoryName(this.answers.name);\n      if (typeof valid === \"string\") {\n        throw Error(valid);\n      }\n    }\n\n    if (this.answers.dirpath.length) {\n      const valid = validate.directory(this.answers.dirpath);\n      if (typeof valid === \"string\") {\n        throw Error(valid);\n      }\n    }\n  }\n\n  public async run() {\n    const spinner = ora(\"Loading example projects\").start();\n    this.projects = await getRepoFolders();\n    spinner.stop();\n    this.validateUserInput();\n\n    if (!this.answers.template.length) {\n      const { template } = await inquirer.prompt({\n        // @ts-ignore\n        type: \"search-list\",\n        message: \"Which template would you like to use?\",\n        name: \"template\",\n        choices: this.projects,\n        validate: (answer) => {\n          return validate.project(this.projects, answer);\n        },\n      });\n      this.answers.template = template;\n    }\n\n    if (!this.answers.install) {\n      const { packages } = await inquirer.prompt({\n        type: \"confirm\",\n        message: \"Should we run `npm install` for you?\",\n        name: \"packages\",\n        default: false,\n      });\n      this.answers.install = packages;\n    }\n\n    if (!this.answers.pkgMgr.length && this.answers.install) {\n      const { manager } = await inquirer.prompt({\n        // @ts-ignore\n        type: \"list\",\n        message: \"Which package manager do you prefer?\",\n        name: \"manager\",\n        default: \"npm\",\n        choices: [\"npm\", \"Yarn\"],\n      });\n      this.answers.pkgMgr = manager;\n    }\n\n    if (!this.answers.name.length) {\n      const { dirname } = await inquirer.prompt({\n        type: \"input\",\n        message: \"What should the project be named?\",\n        name: \"dirname\",\n        default: this.answers.template?.replace(\"/\", \"_\") || \"\",\n        filter: (input) => input.replace(\"/\", \"_\").trim(),\n        validate(answer) {\n          return validate.directoryName(answer);\n        },\n      });\n      this.answers.name = dirname;\n    }\n\n    if (!this.answers.dirpath.length) {\n      const { dirpath } = await inquirer.prompt({\n        type: \"input\",\n        message: \"Where should the new folder be created?\",\n        name: \"dirpath\",\n        default: \"./\",\n        validate(answer) {\n          return validate.directory(answer);\n        },\n      });\n      this.answers.dirpath = dirpath;\n    }\n\n    await this.performSetup();\n  }\n\n  public async performSetup() {\n    const spinner = ora(\n      `Downloading and extracting the ${this.answers.name} project`\n    ).start();\n\n    await downloadTarAndExtract(\n      this.answers.template,\n      `${this.answers.dirpath}/${this.answers.name}`\n    );\n    if (this.answers.install) {\n      spinner.text = `Running \\`${this.answers.pkgMgr} install\\``;\n      await execa(`${this.answers.pkgMgr.toLowerCase()} install`, {\n        cwd: `${this.answers.dirpath}/${this.answers.name}`,\n      });\n    }\n    spinner.succeed(\"You're all set!\");\n\n    console.log(this.answers);\n    // Finish\n  }\n}\n","import axios from \"axios\";\nimport { EXAMPLES_REPO_URL, EXAMPLES_DIR_IGNORE } from \"../constants\";\n\nexport default async function () {\n  const { data, status } = await axios.get<{\n    tree: { path: string; type: string; url: string }[];\n  }>(EXAMPLES_REPO_URL);\n\n  if (status !== 200) {\n    throw new Error(\n      `Something went wrong when fetching the available projects from prisma/prisma-examples. Got status code ${status}`\n    );\n  }\n\n  const mergedData = data.tree\n    // Remove un-needed folders\n    .filter(\n      (item) => !EXAMPLES_DIR_IGNORE.some((dir) => item.path.startsWith(dir))\n    )\n    // Get an object where each key is a folder path and the value is an array of file names\n    .reduce((prev, curr) => {\n      if (curr.type === \"blob\") {\n        const fileName = curr.path.split(\"/\").pop();\n        const path = curr.path.replace(`/${fileName}`, \"\");\n\n        if (prev[path]) prev[path].push(fileName);\n        else prev[path] = [fileName];\n\n        return prev;\n      } else {\n        return { ...prev, [curr.path]: [] };\n      }\n    }, {});\n\n  // Remove any directory listings where there is no project (signified by the presence of package.json)\n  for (let key in mergedData) {\n    if (!mergedData[key].includes(\"package.json\")) {\n      delete mergedData[key];\n    }\n  }\n\n  return Object.keys(mergedData).sort();\n}\n","export const EXAMPLES_REPO_URL = \"https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1\"\nexport const EXAMPLES_REPO_TAR = \"https://codeload.github.com/prisma/prisma-examples/tar.gz/latest\"\nexport const EXAMPLES_DIR_IGNORE = ['.vscode', '.github', '.editorconfig']","import path from \"path\";\nimport stream from \"stream\";\nimport { promisify } from \"util\";\nimport gunzip from \"gunzip-maybe\";\nimport tar from \"tar-fs\";\nimport fetch from \"node-fetch\";\nimport logger from \"./logger\";\n\nimport { EXAMPLES_REPO_TAR } from \"../constants\";\n\nconst pipeline = promisify(stream.pipeline);\n\nexport default async function downloadAndExtractTarball(\n  subFolderPath: string,\n  outputDir: string\n): Promise<void> {\n  if (!subFolderPath) {\n    logger.warn(\n      `No project was selected from the prisma/prisma-examples repostory.`\n    );\n    throw new Error();\n  }\n\n  // Download the repo\n  let response = await fetch(EXAMPLES_REPO_TAR);\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Something went wrong when fetching prisma/prisma-examples. Recieved a status code ${response.status}.`\n    );\n  }\n\n  try {\n    await pipeline(\n      // Unzip it\n      response.body?.pipe(gunzip()),\n      // Extract the stuff into this directory\n      tar.extract(outputDir, {\n        map(header) {\n          let originalDirName = header.name.split(\"/\")[0];\n          header.name = header.name.replace(`${originalDirName}/`, \"\");\n          subFolderPath = subFolderPath.split(path.sep).join(path.posix.sep);\n          if (subFolderPath) {\n            if (header.name.startsWith(subFolderPath)) {\n              header.name = header.name.replace(subFolderPath, \"\");\n            } else {\n              header.name = \"<ignore-me>\";\n            }\n          }\n          return header;\n        },\n        ignore(_filename, header) {\n          if (!header) {\n            throw new Error(`Header is undefined`);\n          }\n\n          return header.name === \"<ignore-me>\";\n        },\n      })\n    );\n  } catch (_) {\n    throw new Error(\n      `Something went wrong when extracting the files from the repostory tar file.`\n    );\n  }\n}\n","import chalk from \"chalk\";\n\nexport default {\n  error: (message) => {\n    console.log(chalk.redBright(message));\n  },\n  info: (message) => {\n    console.log(chalk.cyanBright(message));\n  },\n  warn: (message) => {\n    console.log(chalk.yellowBright(message));\n  },\n};\n","import fs from \"fs\";\nexport default {\n  directoryName(name: string) {\n    let re =\n      /[<>:\"\\/\\\\|?*\\x00-\\x1F]|^(?:aux|con|clock\\$|nul|prn|com[1-9]|lpt[1-9])$/i;\n    if (re.test(name)) {\n      return \"Sorry, that name is invalid.\";\n    } else {\n      return true;\n    }\n  },\n  directory(path: string) {\n    if (path.slice(-1) === \"/\" && path != \"./\") {\n      return \"The path should not end in /\";\n    }\n\n    if (!fs.existsSync(path)) {\n      return `Unable to reach a directory at ${path}`;\n    }\n\n    return true;\n  },\n  project(projects: string[], project: string) {\n    if (!projects.includes(project.trim())) {\n      return \"Oops! That isn't a valid template.\";\n    } else {\n      return true;\n    }\n  },\n};\n"],"mappings":"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","names":["Command","inquirer","axios","EXAMPLES_REPO_URL","EXAMPLES_REPO_TAR","EXAMPLES_DIR_IGNORE","getRepoFolders_default","data","status","axios","EXAMPLES_REPO_URL","mergedData","item","EXAMPLES_DIR_IGNORE","dir","prev","curr","fileName","path","key","path","stream","promisify","gunzip","tar","fetch","chalk","logger_default","message","pipeline","promisify","stream","downloadAndExtractTarball","subFolderPath","outputDir","_a","logger_default","response","fetch","EXAMPLES_REPO_TAR","gunzip","tar","header","originalDirName","path","_filename","fs","validation_default","name","path","projects","project","ora","SearchList","exec","promisify","inquirer","execa","Cli","valid","validation_default","_a","spinner","getRepoFolders_default","template","answer","packages","manager","dirname","input","dirpath","downloadAndExtractTarball","program","Command","main","template","install","name","path","cli","Cli","e","logger_default"]}