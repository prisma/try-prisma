{"version":3,"sources":["../src/index.ts","../src/cli.ts","../src/helpers/getRepoFolders.ts","../src/constants.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander'\nimport Cli from './cli'\nconst program = new Command()\n\nasync function main() {\n    program.name('create-prisma-app')\n        .description('Quickly get up and running with one of Prisma\\'s many starter templates.')\n        .version('0.0.1')\n        .option('-t, --template <template-name>' , 'Which example project would you like to start off with?')\n        .parse(process.argv);\n    \n    const {\n        template\n    } = program.opts()\n    \n    const cli = new Cli()\n    \n    if ( template ) {\n        cli.answers.template = template\n    }\n    \n    await cli.run()\n    \n    console.table(cli.answers)\n}\nmain()","import inquirer from 'inquirer'\nimport getRepoFolders from './helpers/getRepoFolders'\nimport SearchList from 'inquirer-search-list'\ninquirer.registerPrompt('search-list', SearchList )\n\nexport default class Cli {\n    public answers: {\n        template: String | null,\n        install: boolean,\n        name: String\n    } = {\n        template: null,\n        install: false,\n        name: ''\n    }\n\n    constructor(){}\n\n    public async run() {\n        const projects = await getRepoFolders()\n\n        if ( !this.answers.template ) {\n           const { template } = await inquirer.prompt({\n                // @ts-ignore\n                type: 'search-list',\n                message: 'Which template would you like to use?',\n                name: 'template',\n                choices: projects,\n                validate(answer) {\n                    if ( !projects.includes(answer) ) {\n                        return 'Oops! That isn\\'t a valid template.'\n                    } else {\n                        return true\n                    }\n                }\n            })\n            this.answers.template = template\n        }\n\n        const { packages } = await inquirer.prompt({\n            type: 'confirm',\n            message: 'Should we run `npm install` for you?',\n            name: 'packages',\n            default: false\n        })\n        this.answers.install = packages\n\n        const { dirname } = await inquirer.prompt({\n            type: 'input',\n            message: 'What should the project be named?',\n            name: 'dirname',\n            default: this.answers.template?.replace('/', '_') || '',\n            filter: (input) => input.replace('/', '_'),\n            validate(answer) {\n                let re = /[<>:\"\\/\\\\|?*\\x00-\\x1F]|^(?:aux|con|clock\\$|nul|prn|com[1-9]|lpt[1-9])$/i;\n                if (re.test(answer)) {\n                    return 'Sorry, that name is invalid.'\n                } else {\n                    return true\n                }\n            }\n        })\n        this.answers.name = dirname\n    }\n\n    public downloadRepo() {\n        \n    }\n}","import axios from 'axios'\nimport { EXAMPLES_REPO_URL, EXAMPLES_DIR_IGNORE } from '../constants'\n\nexport default async function () {\n    const { data } = await axios.get<{ tree: { path: string, type: string, url: string }[] }>(EXAMPLES_REPO_URL)\n    console.log(data)\n    const mergedData = data.tree\n    // Remove un-needed folders\n    .filter( item =>\n        !EXAMPLES_DIR_IGNORE.some( dir => item.path.startsWith(dir) )\n    )\n    // Get an object where each key is a folder path and the value is an array of file names\n    .reduce((prev, curr) => {\n        if ( curr.type === 'blob' ) {\n            const fileName = curr.path.split('/').pop()\n            const path = curr.path.replace(`/${fileName}`, '')\n            \n            if ( prev[path] ) prev[path].push(fileName)\n            else prev[path] = [fileName]\n\n            return prev\n        } else {\n            return { ...prev, [curr.path]: [] }\n        }\n    }, {})\n\n    // Remove any directory listings where there is no project (signified by the presence of package.json)\n    for ( let key in mergedData) {\n        if ( !mergedData[key].includes('package.json') ) {\n            delete mergedData[key]\n        }\n    }\n    \n    return Object.keys(mergedData).sort()\n}","export const EXAMPLES_REPO_URL = \"https://api.github.com/repos/prisma/prisma-examples/git/trees/latest?recursive=1\"\nexport const EXAMPLES_DIR_IGNORE = ['.vscode', '.github', '.editorconfig']"],"mappings":";AACA,OAAS,WAAAA,MAAe,YCDxB,OAAOC,MAAc,WCArB,OAAOC,MAAW,QCAX,IAAMC,EAAoB,mFACpBC,EAAsB,CAAC,UAAW,UAAW,eAAe,EDEzE,eAAOC,GAA0B,CAC7B,GAAM,CAAE,KAAAC,CAAK,EAAI,MAAMC,EAAM,IAA6DC,CAAiB,EAC3G,QAAQ,IAAIF,CAAI,EAChB,IAAMG,EAAaH,EAAK,KAEvB,OAAQI,GACL,CAACC,EAAoB,KAAMC,GAAOF,EAAK,KAAK,WAAWE,CAAG,CAAE,CAChE,EAEC,OAAO,CAACC,EAAMC,IAAS,CACpB,GAAKA,EAAK,OAAS,OAAS,CACxB,IAAMC,EAAWD,EAAK,KAAK,MAAM,GAAG,EAAE,IAAI,EACpCE,EAAOF,EAAK,KAAK,QAAQ,IAAIC,IAAY,EAAE,EAEjD,OAAKF,EAAKG,GAAQH,EAAKG,GAAM,KAAKD,CAAQ,EACrCF,EAAKG,GAAQ,CAACD,CAAQ,EAEpBF,CACX,KACI,OAAO,CAAE,GAAGA,EAAM,CAACC,EAAK,MAAO,CAAC,CAAE,CAE1C,EAAG,CAAC,CAAC,EAGL,QAAUG,KAAOR,EACPA,EAAWQ,GAAK,SAAS,cAAc,GACzC,OAAOR,EAAWQ,GAI1B,OAAO,OAAO,KAAKR,CAAU,EAAE,KAAK,CACxC,CDhCA,OAAOS,MAAgB,uBACvBC,EAAS,eAAe,cAAeD,CAAW,EAElD,IAAqBE,EAArB,KAAyB,CAWrB,aAAa,CAVb,KAAO,QAIH,CACA,SAAU,KACV,QAAS,GACT,KAAM,EACV,CAEc,CAEd,MAAa,KAAM,CAlBvB,IAAAC,EAmBQ,IAAMC,EAAW,MAAMC,EAAe,EAEtC,GAAK,CAAC,KAAK,QAAQ,SAAW,CAC3B,GAAM,CAAE,SAAAC,CAAS,EAAI,MAAML,EAAS,OAAO,CAEtC,KAAM,cACN,QAAS,wCACT,KAAM,WACN,QAASG,EACT,SAASG,EAAQ,CACb,OAAMH,EAAS,SAASG,CAAM,EAGnB,GAFA,oCAIf,CACJ,CAAC,EACD,KAAK,QAAQ,SAAWD,CAC5B,CAEA,GAAM,CAAE,SAAAE,CAAS,EAAI,MAAMP,EAAS,OAAO,CACvC,KAAM,UACN,QAAS,uCACT,KAAM,WACN,QAAS,EACb,CAAC,EACD,KAAK,QAAQ,QAAUO,EAEvB,GAAM,CAAE,QAAAC,CAAQ,EAAI,MAAMR,EAAS,OAAO,CACtC,KAAM,QACN,QAAS,oCACT,KAAM,UACN,UAASE,EAAA,KAAK,QAAQ,WAAb,YAAAA,EAAuB,QAAQ,IAAK,OAAQ,GACrD,OAASO,GAAUA,EAAM,QAAQ,IAAK,GAAG,EACzC,SAASH,EAAQ,CAEb,MADS,0EACF,KAAKA,CAAM,EACP,+BAEA,EAEf,CACJ,CAAC,EACD,KAAK,QAAQ,KAAOE,CACxB,CAEO,cAAe,CAEtB,CACJ,EDjEA,IAAME,EAAU,IAAIC,EAEpB,eAAeC,GAAO,CAClBF,EAAQ,KAAK,mBAAmB,EAC3B,YAAY,yEAA0E,EACtF,QAAQ,OAAO,EACf,OAAO,iCAAmC,yDAAyD,EACnG,MAAM,QAAQ,IAAI,EAEvB,GAAM,CACF,SAAAG,CACJ,EAAIH,EAAQ,KAAK,EAEXI,EAAM,IAAIC,EAEXF,IACDC,EAAI,QAAQ,SAAWD,GAG3B,MAAMC,EAAI,IAAI,EAEd,QAAQ,MAAMA,EAAI,OAAO,CAC7B,CACAF,EAAK","names":["Command","inquirer","axios","EXAMPLES_REPO_URL","EXAMPLES_DIR_IGNORE","getRepoFolders_default","data","axios","EXAMPLES_REPO_URL","mergedData","item","EXAMPLES_DIR_IGNORE","dir","prev","curr","fileName","path","key","SearchList","inquirer","Cli","_a","projects","getRepoFolders_default","template","answer","packages","dirname","input","program","Command","main","template","cli","Cli"]}